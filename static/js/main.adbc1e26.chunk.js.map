{"version":3,"sources":["actions.ts","constants.ts","api.ts","reducer.ts","components/PlayerStatus.tsx","components/CardPile.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypes","FaceCardValueMap","ACE","KING","QUEEN","JACK","GUESS_TYPE_HIGHER","GUESS_TYPES","flipCardSound","Audio","shuffleSound","handleResponse","response","json","handleSuccess","result","Object","objectSpread","cards","map","card","value","drawCard","deckId","fetch","concat","then","shuffle","createAction","type","payload","undefined","Actions","cardFlip","cardReplace","deckSet","guessCorrect","guessIncorrect","guessPending","playerPass","playerRename","name","id","modalRulesToggle","initialState","activePlayer","correctGuesses","flippedCard","isGuessing","pile","players","remaining","showRulesModal","reducer","state","action","deck_id","toConsumableArray","player","index","PlayerStatus","props","react_default","a","createElement","TextField_default","InputProps","endAdornment","InputAdornment_default","position","length","label","isActive","onChange","style","marginLeft","marginRight","CardPile","index_es","badgeContent","placement","title","showCardBack","cardsInPile","color","backgroundImage","backgroundSize","height","maxHeight","maxWidth","width","image","src","App","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","_reset","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context2","prev","next","play","window","setTimeout","_callee","_context","sent","stop","apply","this","arguments","isCorrect","guessType","_guess","_callee4","correct","_context4","_callee3","nextResult","_context3","handleNameChange","event","currentTarget","toggleModal","useEffect","gameOver","Math","abs","guessDisabled","pileTopCard","padding","className","component","container","direction","alignItems","marginBottom","_players$map","_players$map2","player1Score","player2Score","getGameOverMessage","justify","components_PlayerStatus","assign","margin","components_CardPile","Button_default","disabled","key","onClick","_x","guess","role","variant","aria-labelledby","open","onClose","autoFocus","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adbc1e26.chunk.js","sourcesContent":["import { DrawCardResult, DeckCard } from \"./types\";\n\ntype FunctionType = (...args: any[]) => any;\ninterface ActionCreatorsMapObject {\n  [actionCreator: string]: FunctionType;\n}\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>;\n\nexport interface Action<T extends string> {\n  type: T;\n}\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n  payload: P;\n}\n\nexport function createAction<T extends string>(type: T): Action<T>;\nexport function createAction<T extends string, P>(type: T, payload: P): ActionWithPayload<T, P>;\nexport function createAction<T extends string, P>(type: T, payload?: P) {\n  return payload === undefined ? { type } : { type, payload };\n}\n\nexport enum ActionTypes {\n  cardFlip = 'CARD_FLIP',\n  cardReplace = 'CARD_REPLACE',\n  deckSet = 'DECK_SET',\n  guessCorrect = 'GUESS_CORRECT',\n  guessIncorrect = 'GUESS_INCORRECT',\n  guessPending = 'GUESS_PENDING',\n  playerPass = 'PLAYER_PASS',\n  playerRename = 'PLAYER_RENAME',\n  modalRulesToggle = 'MODAL_RULES_TOGGLE',\n}\n\nexport const Actions = {\n  cardFlip: (result: DrawCardResult) => createAction(ActionTypes.cardFlip, result),\n  cardReplace: (result: DrawCardResult) => createAction(ActionTypes.cardReplace, result),\n  deckSet: (result: DrawCardResult) => createAction(ActionTypes.deckSet, result),\n  guessCorrect: (card: DeckCard) => createAction(ActionTypes.guessCorrect, card),\n  guessIncorrect: (card: DeckCard) => createAction(ActionTypes.guessIncorrect, card),\n  guessPending: () => createAction(ActionTypes.guessPending),\n  playerPass: () => createAction(ActionTypes.playerPass),\n  playerRename: (name: string, id: string) => createAction(ActionTypes.playerRename, { name, id }),\n  modalRulesToggle: () => createAction(ActionTypes.modalRulesToggle),\n};\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","export const FaceCardValueMap: Record<string, number> = {\n    ACE: 14,\n    KING: 13,\n    QUEEN: 12,\n    JACK: 11,\n}\n\nexport const GUESS_TYPE_HIGHER = 'Higher';\nconst GUESS_TYPE_LOWER = 'Lower';\n\nexport const GUESS_TYPES = [GUESS_TYPE_HIGHER, GUESS_TYPE_LOWER];\n\nexport const flipCardSound = new Audio('flip-card.mp3')\nexport const shuffleSound = new Audio('shuffling-cards-1.mp3')\n","import { FaceCardValueMap } from \"./constants\";\nimport { DeckApiDrawCardResult } from \"./types\";\n\nconst handleResponse = (response: Response) => response.json();\nconst handleSuccess = (result: DeckApiDrawCardResult) => ({\n  ...result,\n  cards: result.cards\n    .map(card => ({\n      ...card,\n      value: FaceCardValueMap[card.value] || +card.value,\n    })),\n})\n\nexport const drawCard = (deckId: string) =>\n  fetch(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`)\n    .then(handleResponse)\n    .then(handleSuccess)\n        \nexport const shuffle = (deckId: string) =>\n  fetch(`https://deckofcardsapi.com/api/deck/${deckId}/shuffle/`)\n    .then(handleResponse)","import { ActionTypes, Actions } from \"./actions\";\nimport { Reducer } from \"react\";\nimport { AppState } from \"./types\";\n\nexport const initialState: AppState = {\n  activePlayer: 0,\n  correctGuesses: 0,\n  deckId: '',\n  flippedCard: null,\n  isGuessing: false,\n  pile: [],\n  players: [{\n    id: '1',\n    name: 'Player One',\n    pile: [],\n  },\n  {\n    id: '2',\n    name: 'Player Two',\n    pile: [],\n  }],\n  remaining: 52,\n  showRulesModal: false,\n};\n\nexport const reducer: Reducer<AppState, Actions> = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.cardFlip:\n      return {\n        ...state,\n        flippedCard: action.payload.cards[0],\n        remaining: action.payload.remaining,\n      }\n    case ActionTypes.cardReplace:\n      return {\n        ...state,\n        pile: action.payload.cards,\n        remaining: action.payload.remaining,\n      }\n    case ActionTypes.deckSet:\n      return {\n        ...initialState,\n        deckId: action.payload.deck_id,\n        pile: action.payload.cards,\n        remaining: action.payload.remaining,\n      }\n    case ActionTypes.guessCorrect:\n      return {\n        ...state,\n        correctGuesses: state.correctGuesses + 1,\n        flippedCard: null,\n        isGuessing: false,\n        pile: [action.payload, ...state.pile],\n      }\n    case ActionTypes.guessIncorrect:\n      return {\n        ...state,\n        correctGuesses: 0,\n        flippedCard: null,\n        isGuessing: false,\n        pile: [],\n        players: state.players.map((player, index) => {\n          if (index === state.activePlayer) {\n            return {\n              ...player,\n              pile: player.pile.concat(state.pile, action.payload)\n            }\n          }\n          return player;\n        }),\n      }\n    case ActionTypes.guessPending:\n      return {\n        ...state,\n        isGuessing: true,\n      }\n    case ActionTypes.playerPass:\n      return {\n        ...state,\n        activePlayer: state.activePlayer === 1 ? 0 : 1,\n        correctGuesses: 0,\n      }\n    case ActionTypes.playerRename:\n      return {\n        ...state,\n        players: state.players.map(player => {\n          if (player.id === action.payload.id) {\n            return {\n              ...player,\n              name: action.payload.name,\n            };\n          }\n          return player;\n        })\n      }\n    case ActionTypes.modalRulesToggle:\n      return {\n        ...state,\n        showRulesModal: !state.showRulesModal, \n      }\n    default:\n      return state;\n  }\n}\n","import React, { useState } from 'react'\nimport { Player } from '../types';\n\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\n\ninterface Props extends Player {\n  isActive: boolean;\n  onChange(event: React.ChangeEvent<HTMLInputElement>): void;\n}\n\nconst PlayerStatus: React.SFC<Props> = (props) => {\n  return (\n    <TextField\n      id={props.id}\n      InputProps={{\n        endAdornment: <InputAdornment position=\"end\">{`${props.pile.length}`}</InputAdornment>,\n      }}\n      label={props.isActive ? 'Active': ' '}\n      onChange={props.onChange}\n      style={{\n        marginLeft: 32,\n        marginRight: 32,\n      }}\n      value={props.name}\n    />\n  );\n}\n\nexport default PlayerStatus\n","import React from 'react'\nimport { DeckCard } from '../types';\nimport { Badge, Tooltip } from '@material-ui/core';\n\ninterface CardProps extends Partial<DeckCard> {\n  showCardBack?: boolean;\n  cardsInPile: number;\n}\n\nconst CardPile: React.SFC<CardProps> = (props) => {\n  return (\n    <Badge\n      badgeContent={\n        <Tooltip\n          placement=\"top\"\n          title={props.showCardBack\n            ? `Cards in deck: ${props.cardsInPile}`\n            : `Card in pile: ${props.cardsInPile}`\n          }\n        >\n          <span>{props.cardsInPile}</span>\n        </Tooltip>\n      }\n      color={props.showCardBack\n        ? 'primary'\n        : 'secondary'\n      }\n    >\n      <div\n        style={{\n          backgroundImage: props.showCardBack ? \"url('cardback.png')\" : undefined,\n          backgroundSize: props.showCardBack ? 'cover' : undefined,\n          height: '56vw',\n          maxHeight: 314,\n          maxWidth: 226,\n          width: '40vw',\n        }}\n      >\n        {\n          props.image && (\n            <img\n              src={props.image}\n              style={{\n                height: 'auto',\n                width: '100%'\n              }}\n            />\n          )\n        }\n      </div>\n    </Badge>\n  )\n}\n\nexport default CardPile\n","import React, { useEffect, useReducer } from 'react';\n\nimport Button from '@material-ui/core/Button';\n\nimport './App.scss';\nimport { drawCard, shuffle } from './api';\nimport { DeckCard } from './types';\nimport { Actions } from './actions';\nimport { reducer, initialState } from './reducer';\nimport { GUESS_TYPES, GUESS_TYPE_HIGHER, shuffleSound, flipCardSound } from './constants';\nimport PlayerStatus from './components/PlayerStatus';\nimport { Grid, Stepper, Step, StepLabel, Dialog, DialogTitle, DialogContent, DialogActions, DialogContentText } from '@material-ui/core';\nimport CardPile from './components/CardPile';\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(() => {\n    shuffleSound.play()\n    window.setTimeout(() => {\n      drawCard('new')\n        .then((result) => {\n          dispatch(Actions.deckSet(result));\n        })\n    }, 500)\n  }, []);\n\n  async function reset() {\n    shuffleSound.play()\n    await shuffle(state.deckId);\n    window.setTimeout(async () => {\n      flipCardSound.play()\n      const result = await drawCard(state.deckId)\n      dispatch(Actions.deckSet(result));\n    }, 600)\n  }\n\n  function isCorrect(guessType: string, flippedCard: DeckCard) {\n    return guessType === GUESS_TYPE_HIGHER\n      ? flippedCard.value > state.pile[0].value\n      : flippedCard.value < state.pile[0].value\n  }\n\n  async function guess(guessType: string) {\n    dispatch(Actions.guessPending());\n    \n    flipCardSound.play()\n    const result = await drawCard(state.deckId)\n    const flippedCard = result.cards[0];\n    const correct = isCorrect(guessType, flippedCard);\n\n    dispatch(Actions.cardFlip(result));\n\n    window.setTimeout(async () => {\n      if (correct) {\n        dispatch(Actions.guessCorrect(flippedCard));\n      } else {\n        dispatch(Actions.guessIncorrect(flippedCard))\n        const nextResult = await drawCard(state.deckId)\n        dispatch(Actions.cardReplace(nextResult));\n      }\n    }, 600)\n  }\n\n  function pass() {\n    dispatch(Actions.playerPass());\n  }\n\n  function handleNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const id = event.currentTarget.id;\n    const name = event.currentTarget.value;\n    dispatch(Actions.playerRename(name, id));\n  }\n\n  function getGameOverMessage() {\n    const { players } = state;\n    const [player1Score, player2Score] = players.map(player => player.pile.length)\n    if (player1Score === player2Score) {\n      return \"It's a tie!\";\n    }\n    return `${player1Score < player2Score ? players[0].name : players[1].name } wins!`\n  }\n\n  function toggleModal() {\n    dispatch(Actions.modalRulesToggle());\n  }\n\n  const gameOver = state.remaining === 0 ||\n    (state.remaining + state.pile.length) < Math.abs(state.players[0].pile.length - state.players[1].pile.length)\n  const guessDisabled = state.pile.length === 0 ||\n    state.isGuessing ||\n    gameOver;\n  const pileTopCard = state.pile[0] || {}\n  const flippedCard = state.flippedCard || {}\n\n  return (\n    <div\n      style={{\n        padding: 16,\n      }}\n    >\n      {\n        gameOver && (\n          <div className=\"pyro\">\n            <div className=\"before\"></div>\n            <div className=\"after\"></div>\n          </div>\n        )\n      }\n      <Grid\n        component=\"header\"\n        container\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{\n          marginBottom: 16,\n        }}\n      >\n        {\n          gameOver && (\n            <h2>{getGameOverMessage()}</h2>\n          )\n        }\n        <Grid\n          container\n          justify=\"center\"\n        >\n          {\n            state.players.map((player, index) => (\n              <PlayerStatus\n                {...player}\n                isActive={state.activePlayer === index}\n                onChange={handleNameChange}\n              />\n            ))\n          }\n        </Grid>\n      </Grid>\n      <Grid\n        component=\"main\"\n        container\n        alignItems=\"center\"\n        direction=\"column\"\n      >\n        <Grid\n          container\n          justify=\"center\"\n          style={{\n            marginBottom: 16,\n          }}\n          wrap=\"nowrap\"\n        >\n          <div style={{ margin: 8 }}>\n            <CardPile\n              {...flippedCard}\n              cardsInPile={state.remaining}\n              showCardBack={state.remaining > 0}\n            />\n          </div>\n          <div style={{ margin: 8 }}>\n            <CardPile\n              {...pileTopCard}\n              cardsInPile={state.pile.length}\n            />\n          </div>\n        </Grid>\n        <div className=\"button-group\">\n          <Grid\n            container\n            justify=\"center\"\n          >\n            {\n              GUESS_TYPES.map(guessType => (\n                <Button\n                  color=\"primary\"\n                  disabled={guessDisabled}\n                  key={guessType}\n                  onClick={() => guess(guessType)}\n                  role=\"button\"\n                  variant=\"outlined\"\n                >\n                  {guessType}\n                </Button>\n              ))\n            }\n            <Button\n              color=\"primary\"\n              disabled={state.correctGuesses < 3 || !!state.flippedCard}\n              onClick={pass}\n              role=\"button\"\n              variant=\"contained\"\n            >\n              {`Pass${state.correctGuesses < 3 ? ` (${3 - state.correctGuesses})` : ''}`}\n            </Button>\n          </Grid>\n          <Grid\n            container\n            justify=\"center\"\n          >\n            <Button\n              onClick={reset}\n              role=\"button\"\n              variant=\"text\"\n            >\n              Reset Game\n            </Button>\n            <Button\n              onClick={toggleModal}\n              role=\"buton\"\n              variant=\"text\"\n            >\n              Review Ruleset\n            </Button>\n          </Grid>\n        </div>\n      </Grid>\n      <Dialog\n        aria-labelledby=\"rules-dialog-title\"\n        open={state.showRulesModal}\n        onClose={toggleModal}\n      >\n        <DialogTitle id=\"rules-dialog-title\">\n          High Low: The Rules\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            This is a two-player, hot-seat card game where players take turns guessing whether the next flipped card will be higher or lower than the last. If the guessing player is incorrect they take the newly flipped card and all the cards that have accumulated in the discard pile. Each card is a point and the object is to end the game with the fewest points. If a player is able to make three correct guesses in a row they have the option to pass play to their opponent. Instead of passing a player may choose to continue guessing so as not to provide their opponent with a easy guess. However the active player only retains the ability to pass as long as they keep guessing correctly. If they guess incorrectly at any point the correct guess counter resets to zero.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            autoFocus\n            color=\"primary\"\n            onClick={toggleModal}\n          >\n            Got it\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}